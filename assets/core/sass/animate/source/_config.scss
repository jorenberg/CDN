// Animate.cssÂ®, Default Configurations.
// -------------------------------------
// Sass - (3.4.21): Selective Steve
// Compass - (v1.0.3): Polaris
// -------------------------------------
// ---------------------------------- //
//        Using @mixin directive      //
//       @author : Prabhat Kumar      //
//        @date  : 16-April-2016      //
// ---------------------------------- //

// ==========================================
// A. Mixin helper to output vendor prefixes.
// ==========================================
// @param {String} $property - Unprefixed CSS property
// @param {*} $value - Raw CSS value
// @param {List} $prefixes - List of prefixes to output
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    -#{$prefix}-#{$property}: $value;
  }
  #{$property}: $value;
}

// ==========================================
// B. The @function directive to strip unit.
// ==========================================
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ============================================
// C. A smart cache @mixin directive.
//    @author : Prabhat Kumar
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Global cache map.
$cache: ();

// Cache mixin.
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
@mixin cache($declarations) {
  // Looping through all properties/values from map.
  @each $property, $value in $declarations {
    // Get the stored values for the current property.
    $stored-values: map-get($cache, $property);
    // If the value doesn't exist in stored values.
    @if not index($stored-values, $value) {
      // Add it.
      $cache: map-merge($cache, ($property: append($stored-values or (), $value))) !global;
      // And create a placeholder at root level.
      @at-root %#{$property}-#{length(map-get($cache, $property))} {
        #{$property}: $value;
      }
    }
    // Extend the placeholder.
    @extend %#{$property}-#{index(map-get($cache, $property), $value)};
  }
}
